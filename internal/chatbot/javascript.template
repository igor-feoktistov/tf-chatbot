const EVENT_USER_PROMPT   = "01"
const EVENT_SYSTEM_PROMPT = "02"
EVENT_ASSISTANT_WAIT      = "03"
EVENT_ASSISTANT_OUTPUT    = "04"
EVENT_ASSISTANT_FINISH    = "05"
EVENT_PING                = "06"
EVENT_PONG                = "07"
EVENT_DIAGNOSTIC          = "08"

const chatbox = document.getElementById('chatbox');
const systemPrompt = document.getElementById('systemPromptText');
const userPrompt = document.getElementById('userPromptText');
const connect = document.getElementById("connect");

var ws = null;

chatbox.innerHTML += `<h3>Assistant</h3></div>Hello! How can I help you today?`;
chatbox.scrollTop = chatbox.scrollHeight;

userPrompt.addEventListener('keydown', function(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        sendUserPrompt();
    }
});

function startWebsocket() {
    ws = new WebSocket("ws://" + window.location.host + "/ws");
    ws.addEventListener('open', (event) => {
        userPrompt.disabled = false;
        connect.style.visibility = "hidden";
        console.log('Websocket is connected!');
    });
    ws.addEventListener('message', (event) => {
        ws.onmessage = readMessage(event);
    });
    ws.addEventListener('close', (event) => {
        userPrompt.disabled = true;
        connect.style.visibility = "visible";
        checkWebsocket();
    });
}

function checkWebsocket(){
    if (!ws || ws.readyState == 3) startWebsocket();
}

function sendSystemPrompt() {
    const message = systemPrompt.value;
    if (message.trim().length > 0) {
        ws.send(EVENT_SYSTEM_PROMPT + ":" + message);
        document.getElementById('systemPromptDetails').open = false;
    }
}

function sendUserPrompt() {
    if (ws.readyState === WebSocket.CLOSED) {
        startWebsocket();
    }
    const message = userPrompt.value;
    if (message.trim().length > 0) {
        chatbox.innerHTML += `<div><h3>User</h3>${message}<h3>Assistant</h3></div>`;
        ws.send(EVENT_USER_PROMPT + ":" + message);
        userPrompt.value = '';
        chatbox.scrollTop = chatbox.scrollHeight;
    }
}

function readMessage(event) {
    const eventType = event.data.substring(0, 2);
    switch (eventType) {
        case EVENT_ASSISTANT_WAIT:
            addSpinner();
            chatbox.scrollTop = chatbox.scrollHeight;
            break;
        case EVENT_ASSISTANT_OUTPUT:
        case EVENT_DIAGNOSTIC:
            deleteSpinner();
            chatbox.innerHTML += event.data.substring(3);
            chatbox.scrollTop = chatbox.scrollHeight;
            break;
        case EVENT_ASSISTANT_FINISH:
            deleteSpinner();
            break;
        case EVENT_PING:
            ws.send(EVENT_PONG + ":" + 'pong');
            break;
        case EVENT_PONG:
            break;
        default:
            console.log('Unexpected event type ' + eventType);
    }
}

function addSpinner() {
    chatbox.innerHTML += `<div id="spinner"><img src="/static/icons/gear.gif">&nbsp;Awaiting response...</div>`;
}

function deleteSpinner() {
    const spinner = document.getElementById('spinner');
    if (spinner) {
        chatbox.removeChild(spinner);
    }
}

function enableControlElement(controlElement) {
    const element = document.getElementById(controlElement);
    if (element) {
        element.style.display = 'flex';
    }
}

function disableControlElement(controlElement) {
    const element = document.getElementById(controlElement);
    if (element) {
        element.style.display = 'none';
    }
}

function disableHistory() {
    disableControlElement('disableHistory');
    setTimeout(() => {
        enableControlElement('enableHistory');
    }, 100);
}

function enableHistory() {
    disableControlElement('enableHistory');
    setTimeout(() => {
        enableControlElement('disableHistory');
    }, 100);
}

function showTooltip(element, text, event) {
    const tooltip = document.createElement('div');
    tooltip.className = 'dynamic-tooltip';
    tooltip.textContent = text;
    tooltip.id = 'active-tooltip';
    document.body.appendChild(tooltip);
    const rect = element.getBoundingClientRect();
    tooltip.style.left = (rect.left + rect.width / 2 - tooltip.offsetWidth / 2) + 'px';
    tooltip.style.top = (rect.top + tooltip.offsetHeight) + 'px';
    setTimeout(() => {
        tooltip.classList.add('visible');
    }, 1);
}

function hideTooltip() {
    const tooltip = document.getElementById('active-tooltip');
    if (tooltip) {
        tooltip.classList.remove('visible');
        setTimeout(() => {
            tooltip.remove();
        }, 10);
    }
}

startWebsocket();
setInterval(checkWebsocket, 5000);

document.querySelectorAll('[data-tooltip]').forEach(element => {
    element.addEventListener('mouseenter', function(event) {
        const tooltipText = this.getAttribute('data-tooltip');
        showTooltip(this, tooltipText, event);
    });
    element.addEventListener('mouseleave', function() {
        hideTooltip();
    });
});

enableControlElement('disableHistory');
